'''
1619. 删除某些元素后的数组均值
给你一个整数数组 arr ，请你删除最小 5% 的数字和最大 5% 的数字后，剩余数字的平均值。

与 标准答案 误差在 10-5 的结果都被视为正确结果。

 

示例 1：

输入：arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
输出：2.00000
解释：删除数组中最大和最小的元素后，所有元素都等于 2，所以平均值为 2 。
示例 2：

输入：arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
输出：4.00000
示例 3：

输入：arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
输出：4.77778
示例 4：

输入：arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]
输出：5.27778
示例 5：

输入：arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]
输出：5.29167
 

提示：

20 <= arr.length <= 1000
arr.length 是 20 的 倍数 
0 <= arr[i] <= 105
'''
import heapq
from typing import List
'''
思路：堆
用2个堆分别保存最大和最小的5%元素，最后求全部元素的和减去2个堆的和的平均值

时间复杂度：O(nlog(n/20))
空间复杂度：O(n/20)
'''


class Solution:
    def trimMean(self, arr: List[int]) -> float:
        n = len(arr)
        minHeap, maxHeap = arr[:n // 20], [-arr[i] for i in range(n // 20)]  # 最小堆保存最大的5%，最大值保存最小的5%
        heapq.heapify(minHeap)
        heapq.heapify(maxHeap)
        for i in range(n // 20, n):
            if arr[i] > minHeap[0]:
                heapq.heapreplace(minHeap, arr[i])
            if -arr[i] > maxHeap[0]:
                heapq.heapreplace(maxHeap, -arr[i])
        arr.sort()
        return (sum(arr) - sum(minHeap) + sum(maxHeap)) / (n - n / 10)


s = Solution()
print(
    s.trimMean([
        73316, 30651, 98043, 27429, 52655, 4373, 44185, 56358, 43481, 72613, 27510, 35996, 85416, 66386, 64202, 21273, 59298, 2639, 56361, 34981, 23376, 15317,
        36951, 53079, 12414, 24445, 28352, 858, 57180, 87765, 40112, 8997, 74101, 79683, 41058, 56115, 46348, 6977, 65666, 32160, 74170, 7024, 30224, 43927,
        37757, 31037, 55693, 50102, 60485, 33939, 78024, 48917, 62298, 56391, 12939, 18952, 47790, 8447, 34988, 4991, 65786, 98347, 88987, 36876, 76676, 55177,
        15060, 64100, 68853, 59421, 10556, 95099, 4285, 531, 40213, 98850, 21073, 37624, 1073, 1202, 50790, 44139, 56782, 8076, 53547, 68027, 37710, 91732,
        92488, 51351, 85215, 6490, 5820, 43026, 53281, 8516, 51858, 63549, 48860, 40447, 42330, 41138, 56495, 6301, 65081, 89961, 73565, 73586, 20206, 25699,
        23243, 30805, 54905, 21839, 19937, 5700, 23381, 18417, 62538, 88940, 52844, 27447, 48947, 4978, 10877, 79405, 63496, 82149, 22348, 20561, 25072, 30188,
        28541, 8584, 95482, 10800, 59351, 92268, 45706, 28924, 90874, 65383, 17383, 6655, 50694, 94829, 36104, 30458, 75653, 57297, 52164, 77003, 73095, 19079,
        21235, 60198, 23429, 70471, 16212, 92614
    ]))
print(s.trimMean([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]))
print(s.trimMean([6, 2, 7, 5, 1, 2, 0, 3, 10, 2, 5, 0, 5, 5, 0, 8, 7, 6, 8, 0]))
print(s.trimMean([6, 0, 7, 0, 7, 5, 7, 8, 3, 4, 0, 7, 8, 1, 6, 8, 1, 1, 2, 4, 8, 1, 9, 5, 4, 3, 8, 5, 10, 8, 6, 6, 1, 0, 6, 10, 8, 2, 3, 4]))
print(
    s.trimMean([
        9, 7, 8, 7, 7, 8, 4, 4, 6, 8, 8, 7, 6, 8, 8, 9, 2, 6, 0, 0, 1, 10, 8, 6, 3, 3, 5, 1, 10, 9, 0, 7, 10, 0, 10, 4, 1, 10, 6, 9, 3, 6, 0, 0, 2, 7, 0, 6, 7,
        2, 9, 7, 7, 3, 0, 1, 6, 1, 10, 3
    ]))
print(
    s.trimMean([
        4, 8, 4, 10, 0, 7, 1, 3, 7, 8, 8, 3, 4, 1, 6, 2, 1, 1, 8, 0, 9, 8, 0, 3, 9, 10, 3, 10, 1, 10, 7, 3, 2, 1, 4, 9, 10, 7, 6, 4, 0, 8, 5, 1, 2, 1, 6, 2, 5,
        0, 7, 10, 9, 10, 3, 7, 10, 5, 8, 5, 7, 6, 7, 6, 10, 9, 5, 10, 5, 5, 7, 2, 10, 7, 7, 8, 2, 0, 1, 1
    ]))
