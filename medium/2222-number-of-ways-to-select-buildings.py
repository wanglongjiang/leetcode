'''
2222. 选择建筑的方案数
给你一个下标从 0 开始的二进制字符串 s ，它表示一条街沿途的建筑类型，其中：

s[i] = '0' 表示第 i 栋建筑是一栋办公楼，
s[i] = '1' 表示第 i 栋建筑是一间餐厅。
作为市政厅的官员，你需要随机 选择 3 栋建筑。然而，为了确保多样性，选出来的 3 栋建筑 相邻 的两栋不能是同一类型。

比方说，给你 s = "001101" ，我们不能选择第 1 ，3 和 5 栋建筑，因为得到的子序列是 "011" ，有相邻两栋建筑是同一类型，所以 不合 题意。
请你返回可以选择 3 栋建筑的 有效方案数 。

 

示例 1：

输入：s = "001101"
输出：6
解释：
以下下标集合是合法的：
- [0,2,4] ，从 "001101" 得到 "010"
- [0,3,4] ，从 "001101" 得到 "010"
- [1,2,4] ，从 "001101" 得到 "010"
- [1,3,4] ，从 "001101" 得到 "010"
- [2,4,5] ，从 "001101" 得到 "101"
- [3,4,5] ，从 "001101" 得到 "101"
没有别的合法选择，所以总共有 6 种方法。
示例 2：

输入：s = "11100"
输出：0
解释：没有任何符合题意的选择。
 

提示：

3 <= s.length <= 10^5
s[i] 要么是 '0' ，要么是 '1' 
'''
'''
思路：前缀和
3个建筑中，相邻的2个不能相同，意味着只能是101或者010
可以遍历整个字符串，如果当前字符s[i]是0，那么i左边的1的个数乘以右边1的个数即为当前字符0做为中心的方案数。
同理，如果当前字符s[i]是1，那么左右2边的0的个数的乘积即为当前字符作为中心的方案数。

统计2边的0的个数可以用前缀和数组进行计算。

时间复杂度：O(n)
空间复杂度：O(n)
'''


class Solution:
    def numberOfWays(self, s: str) -> int:
        prefixSum, n = [0] * len(s), len(s)  # 前缀和数组统计1的个数
        prefixSum[0] = 1 if s[0] == '1' else 0
        for i in range(1, n):
            if s[i] == '1':
                prefixSum[i] = prefixSum[i - 1] + 1
            else:
                prefixSum[i] = prefixSum[i - 1]
        ans = 0
        for i in range(1, n - 1):
            if s[i] == '1':
                ans += (i - prefixSum[i - 1]) * (n - i - 1 - (prefixSum[-1] - prefixSum[i]))
            else:
                ans += prefixSum[i - 1] * (prefixSum[-1] - prefixSum[i])
        return ans


s = Solution()
print(s.numberOfWays("001101"))
