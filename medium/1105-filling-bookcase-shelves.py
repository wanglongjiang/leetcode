'''
填充书架
附近的家居城促销，你买回了一直心仪的可调节书架，打算把自己的书都整理到新的书架上。

你把要摆放的书 books 都整理好，叠成一摞：从上往下，第 i 本书的厚度为 books[i][0]，高度为 books[i][1]。

按顺序 将这些书摆放到总宽度为 shelf_width 的书架上。

先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 shelf_width），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。

需要注意的是，在上述过程的每个步骤中，摆放书的顺序与你整理好的顺序相同。 例如，如果这里有 5 本书，那么可能的一种摆放情况是：
第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。

每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。

以这种方式布置书架，返回书架整体可能的最小高度。

例如：
输入：books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
输出：6
解释：
3 层书架的高度和为 1 + 3 + 2 = 6 。
第 2 本书不必放在第一层书架上。

提示：

1 <= books.length <= 1000
1 <= books[i][0] <= shelf_width <= 1000
1 <= books[i][1] <= 1000
'''
from typing import List
'''
思路：回溯+记忆化
对于book[i]、book[i+1]如果从宽度上满足放到同一层，
如果book[i]的高度>=book[i+1]的高度，最佳策略就是放到同一层
如果book[i]的高度<book[i+1]的高度，需要尝试计算分别放到2层的高度
时间复杂度：O(n^2)，最坏情况下
空间复杂度：O(n)
'''


class Solution:
    def minHeightShelves(self, books: List[List[int]], shelf_width: int) -> int:
        n = len(books)
        h = [float('inf')] * n

        def backtrack(index):
            if h[index] != float('inf'):
                return h[index]
            width = shelf_width - books[index][0]
            curHeight = books[index][1]
            for i in range(index + 1, n):
                if width >= books[i][0]:  # 如果本行可以放下
                    if books[i][1] <= curHeight:  # 如果书的高度小于当前层高度，最佳策略是放到本层
                        width -= books[i][0]
                    else:  # 如果当前书的高度大于当前层高度，需要尝试放到同一层或新开一层
                        h[index] = min(h[index], curHeight + backtrack(i))
                        # 放到本层
                        width -= books[i][0]
                        curHeight = books[i][1]
                else:  # 如果本行放不下，需要进入下一层
                    h[index] = min(h[index], curHeight + backtrack(i))
                    return h[index]  # 一旦进入下一层就不能再回到本层放书
            # 上面的循环体能运行完，说明本层能放下
            h[index] = min(h[index], curHeight)
            return h[index]

        backtrack(0)
        return h[0]


s = Solution()
print(s.minHeightShelves([[2, 7], [9, 1], [6, 1], [4, 2], [3, 3], [8, 6], [10, 3], [1, 10]], 10))
print(s.minHeightShelves(books=[[1, 1], [2, 3], [2, 3], [1, 1], [1, 1], [1, 1], [1, 2]], shelf_width=4))

print(
    s.minHeightShelves(
        [[11, 83], [170, 4], [93, 80], [155, 163], [134, 118], [75, 14], [122, 192], [123, 154], [187, 29], [160, 64], [170, 152], [113, 179], [60, 102],
         [28, 187], [59, 95], [187, 97], [49, 193], [67, 126], [75, 45], [130, 160], [4, 102], [116, 171], [43, 170], [96, 188], [54, 15], [167, 183],
         [58, 158], [59, 55], [148, 183], [89, 95], [90, 113], [51, 49], [91, 28], [172, 103], [173, 3], [131, 78], [11, 199], [77, 200], [58, 65], [77, 30],
         [157, 58], [18, 194], [101, 148], [22, 197], [76, 181], [21, 176], [50, 45], [80, 174], [116, 198], [138, 9], [58, 125], [163, 102], [133, 175],
         [21, 39], [141, 156], [34, 185], [14, 113], [11, 34], [35, 184], [16, 132], [78, 147], [85, 170], [32, 149], [46, 94], [196, 3], [155, 90], [9, 114],
         [117, 119], [17, 157], [94, 178], [53, 55], [103, 142], [70, 121], [9, 141], [16, 170], [92, 137],
         [157, 30], [94, 82], [144, 149], [128, 160], [8, 147], [153, 198], [12, 22], [140, 68], [64, 172], [86, 63], [66, 158], [23, 15], [120, 99], [27, 165],
         [79, 174], [46, 19], [60, 98], [160, 172], [128, 184], [63, 172], [135, 54], [40, 4], [102, 171], [29, 125], [81, 9], [111, 197], [16, 90], [22, 150],
         [168, 126], [187, 61], [47, 190], [54, 110], [106, 102], [55, 47], [117, 134], [33, 107], [2, 10], [18, 62], [109, 188], [113, 37], [59, 159],
         [120, 175], [17, 147], [112, 195], [177, 53], [148, 173], [29, 105], [196, 32], [123, 51], [29, 19], [161, 178], [148, 2], [70, 124], [126, 9],
         [105, 87], [41, 121], [147, 10], [78, 167], [91, 197], [22, 98], [73, 33], [148, 194], [166, 64], [33, 138], [139, 158], [160, 19], [140, 27],
         [103, 109], [88, 16], [99, 181], [2, 140], [50, 188], [200, 77], [73, 84], [159, 130], [115, 199], [152, 79], [1, 172], [124, 136], [117, 138],
         [158, 86], [193, 150], [56, 57], [150, 133], [52, 186], [21, 145], [127, 97], [108, 110], [174, 44], [199, 169], [139, 200], [66, 48], [52, 190],
         [27, 86], [142, 191], [191, 79], [126, 114], [125, 100], [176, 95], [104, 79], [146, 189], [144, 78], [52, 106], [74, 74], [163, 128], [34, 181],
         [20, 178], [15, 107], [105, 8], [66, 142], [39, 126], [95, 59], [164, 69], [138, 18], [110, 145], [128, 200], [149, 150], [149, 93], [145, 140],
         [90, 170], [81, 127], [57, 151], [167, 127], [95, 89]], 200))
