'''
2310. 个位数字为 K 的整数之和
给你两个整数 num 和 k ，考虑具有以下属性的正整数多重集：

每个整数个位数字都是 k 。
所有整数之和是 num 。
返回该多重集的最小大小，如果不存在这样的多重集，返回 -1 。

注意：

多重集与集合类似，但多重集可以包含多个同一整数，空多重集的和为 0 。
个位数字 是数字最右边的数位。
 

示例 1：

输入：num = 58, k = 9
输出：2
解释：
多重集 [9,49] 满足题目条件，和为 58 且每个整数的个位数字是 9 。
另一个满足条件的多重集是 [19,39] 。
可以证明 2 是满足题目条件的多重集的最小长度。
示例 2：

输入：num = 37, k = 2
输出：-1
解释：个位数字为 2 的整数无法相加得到 37 。
示例 3：

输入：num = 0, k = 7
输出：0
解释：空多重集的和为 0 。
 

提示：

0 <= num <= 3000
0 <= k <= 9
'''
'''
思路：数学
设多重集的大小为x，那么x个尾数为k的数字相加，个位数的和为x*k，
此时num的尾数与x*k的尾数相同，且num>=x*k，此时x即为答案。
因为num-x*k，为x个不含个位数的整数之和，此时十位数以上的数值可以任意在位数为k的整数里面分配，不影响多重集的大小。

查找x，可以从1开始，迭代到10

时间复杂度：O(1)
空间复杂度：O(1)
'''


class Solution:
    def minimumNumbers(self, num: int, k: int) -> int:
        if num == 0:
            return 0
        for x in range(1, 11):
            if x * k <= num and (x * k) % 10 == num % 10:
                return x
        return -1


s = Solution()
print(s.minimumNumbers(10, 8))
print(s.minimumNumbers(10, 1))
