'''
最佳买卖股票时机含冷冻期
给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
'''
from typing import List
'''
思路：动态规划
设一个二维动态规划数组dp[i]，dp[i][0]代表第i天为买入状态时的最大收益，dp[i][1]为第i天为卖出状态时的最大收益，dp[i][2]为冷冻状态时收益
那么有状态转移方程为：
1. dp[i][0] = max(dp[i - 1][0] + prices[i] - prices[i - 1], dp[i - 1][2])
 > 说明：第i天为买入状态，需要i-1天为买入状态或冷冻状态，最大收益为max(i-1为买入状态收益+这2天的差价, i-1天为冷冻状态收益)
2. dp[i][1] = dp[i - 1][0] + prices[i] - prices[i - 1]  # 卖出
 > 说明：第i天为卖出状态，需要i-1天为买入状态，最大收益为i-1天为买入状态的收益+这2天的差价
3. dp[i][2] = max(dp[i - 1][1], dp[i - 1][2])  # 冷冻
 > 说明：第i天为冷冻状态，需要i-1天为卖出或冷冻状态，最大收益为2者最大值

时间复杂度：O(n)
空间复杂度：O(n)
'''


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        dp = [[0] * 3 for _ in range(n)]
        for i in range(1, n):
            dp[i][0] = max(dp[i - 1][0] + prices[i] - prices[i - 1], dp[i - 1][2])  # 买入状态
            dp[i][1] = dp[i - 1][0] + prices[i] - prices[i - 1]  # 卖出状态
            dp[i][2] = max(dp[i - 1][1], dp[i - 1][2])  # 冷冻状态
        return max(dp[n - 1][1], dp[n - 1][2])


s = Solution()
print(s.maxProfit([1, 2, 3, 0, 2]))
