'''
319. 灯泡开关
初始时有 n 个灯泡处于关闭状态。

对某个灯泡切换开关意味着：如果灯泡状态为关闭，那该灯泡就会被开启；而灯泡状态为开启，那该灯泡就会被关闭。

第 1 轮，每个灯泡切换一次开关。即，打开所有的灯泡。

第 2 轮，每两个灯泡切换一次开关。 即，每两个灯泡关闭一个。

第 3 轮，每三个灯泡切换一次开关。

第 i 轮，每 i 个灯泡切换一次开关。 而第 n 轮，你只切换最后一个灯泡的开关。

找出 n 轮后有多少个亮着的灯泡。



示例 1：

输入：n = 3
输出：1
解释：
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭].

你应该返回 1，因为只有一个灯泡还亮着。

示例 2：
输入：n = 0
输出：0

示例 3：
输入：n = 1
输出：1


提示：
0 <= n <= 10^9
'''
'''
思路：脑筋急转弯 数学
对于任意一个数字a，他的开关次数需要看他有几个因子，一个数字有几个因子，他会被开关几次，
对于1..n的数字，可以遍历一次求它有多少个因子。如果这样计算，时间复杂度是O(n$sqrt(n)$)，会超时。

再想想，只有因数数量是奇数的，才会亮灯。

什么数字的因数数量是奇数呢？
一般的数字a其因数都是成对出现的：1和a,2和a/2,3和a/3...，
只有完全平方数，它会出现奇数个因数，其中一个是b^2=a，
那么结论就出来乐，完全平方数的因数数量是奇数，这些是亮灯的，其他的会灭

时间复杂度：O($sqrt(n)$)
空间复杂度：O(1)
'''


class Solution:
    def bulbSwitch(self, n: int) -> int:
        import math
        return int(math.sqrt(n))
