'''
1551. 使数组中所有元素相等的最小操作数
存在一个长度为 n 的数组 arr ，其中 arr[i] = (2 * i) + 1 （ 0 <= i < n ）。

一次操作中，你可以选出两个下标，记作 x 和 y （ 0 <= x, y < n ）并使 arr[x] 减去 1 、arr[y] 加上 1
（即 arr[x] -=1 且 arr[y] += 1 ）。最终的目标是使数组中的所有元素都 相等 。
题目测试用例将会 保证 ：在执行若干步操作后，数组中的所有元素最终可以全部相等。

给你一个整数 n，即数组的长度。请你返回使数组 arr 中所有元素相等所需的 最小操作数 。



示例 1：

输入：n = 3
输出：2
解释：arr = [1, 3, 5]
第一次操作选出 x = 2 和 y = 0，使数组变为 [2, 3, 4]
第二次操作继续选出 x = 2 和 y = 0，数组将会变成 [3, 3, 3]
示例 2：

输入：n = 6
输出：9


提示：

1 <= n <= 10^4
'''
'''
思路：数学
经过分析知道，如果n为奇数，那么所有的数字都需要修改为n/2*2+1，
如果n为偶数，所有的数字都需要修改为n/2*2+2，
因为每次可以改变在数组中对称的2个数，只计算数组的一半的改变次数即可
因为原数组就是个等差序列，所以改变次数也是个等差序列，可以用等差序列求和数学公式Sn=n(a1+an)/2计算得出

时间复杂度：O(1)
空间复杂度：O(1)
'''


class Solution:
    def minOperations(self, n: int) -> int:
        m = n // 2  # 数组的一半长度
        mid = (m - 1) * 2 + 1  # 左一半数组的最大值
        return m * mid // 2 + 2 * m if n % 2 else m * (mid - 1) // 2 + m  # 用等差序列求和公式计算出改变的次数


s = Solution()
print(s.minOperations(31) == 240)  # TODO
print(s.minOperations(1))
print(s.minOperations(2))
print(s.minOperations(3))
print(s.minOperations(4))
print(s.minOperations(6))
