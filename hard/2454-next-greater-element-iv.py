'''
2454. 下一个更大元素 IV
给你一个下标从 0 开始的非负整数数组 nums 。对于 nums 中每一个整数，你必须找到对应元素的 第二大 整数。

如果 nums[j] 满足以下条件，那么我们称它为 nums[i] 的 第二大 整数：

j > i
nums[j] > nums[i]
恰好存在 一个 k 满足 i < k < j 且 nums[k] > nums[i] 。
如果不存在 nums[j] ，那么第二大整数为 -1 。

比方说，数组 [1, 2, 4, 3] 中，1 的第二大整数是 4 ，2 的第二大整数是 3 ，3 和 4 的第二大整数是 -1 。
请你返回一个整数数组 answer ，其中 answer[i]是 nums[i] 的第二大整数。

 

示例 1：

输入：nums = [2,4,0,9,6]
输出：[9,6,6,-1,-1]
解释：
下标为 0 处：2 的右边，4 是大于 2 的第一个整数，9 是第二个大于 2 的整数。
下标为 1 处：4 的右边，9 是大于 4 的第一个整数，6 是第二个大于 4 的整数。
下标为 2 处：0 的右边，9 是大于 0 的第一个整数，6 是第二个大于 0 的整数。
下标为 3 处：右边不存在大于 9 的整数，所以第二大整数为 -1 。
下标为 4 处：右边不存在大于 6 的整数，所以第二大整数为 -1 。
所以我们返回 [9,6,6,-1,-1] 。
示例 2：

输入：nums = [3,3]
输出：[-1,-1]
解释：
由于每个数右边都没有更大的数，所以我们返回 [-1,-1] 。
 

提示：

1 <= nums.length <= 105
0 <= nums[i] <= 109
'''
from heapq import heappop, heappush
from typing import List
'''
思路：单调栈+优先队列（堆）
单调栈stk存放尚未有更大元素的下标，栈中下标指向的元素是递减的，堆heap存放已经找到一个大的元素的下标。
遍历nums，对于当前元素nums[i]，
- 如果它比heap[0]大，将heap中的下标出堆，heap出堆的下标的第2大元素即为当前元素nums[i]，持续该过程，直至不满足开头的条件。
- 如果它比stk栈顶元素大，将stk中的下标出栈，移动到heap，持续该过程，直至不满足开头的条件。
- 经过上述处理过程后，将i入栈stk。

时间复杂度：O(n)
空间复杂度：O(n)
'''


class Solution:
    def secondGreaterElement(self, nums: List[int]) -> List[int]:
        stk, heap = [], []
        ans = [-1] * len(nums)
        for i, num in enumerate(nums):
            while heap and num > heap[0][0]:
                _, j = heappop(heap)
                ans[j] = num
            while stk and num > nums[stk[-1]]:
                j = stk.pop()
                heappush(heap, (nums[j], j))
            stk.append(i)
        return ans


s = Solution()
assert s.secondGreaterElement([
    272, 238, 996, 406, 763, 164, 102, 948, 217, 760, 609, 700, 848, 637, 748, 718, 469, 449, 502, 703, 292, 86, 91, 551, 699, 293, 244, 406, 22, 968, 434, 805,
    910, 927, 623, 79, 108, 541, 411
]) == [
    406, 406, -1, 948, 848, 217, 217, -1, 609, 968, 848, 748, 910, 718, 805, 805, 703, 703, 551, 805, 699, 551, 699, 968, 805, 968, 968, 434, 434, -1, 910, 927,
    -1, -1, -1, 541, 411, -1, -1
]
assert s.secondGreaterElement([11, 13, 15, 12, 0, 15, 12, 11, 9]) == [15, 15, -1, -1, 12, -1, -1, -1, -1]
