'''
2262. 字符串的总引力
字符串的 引力 定义为：字符串中 不同 字符的数量。

例如，"abbca" 的引力为 3 ，因为其中有 3 个不同字符 'a'、'b' 和 'c' 。
给你一个字符串 s ，返回 其所有子字符串的总引力 。

子字符串 定义为：字符串中的一个连续字符序列。

 

示例 1：

输入：s = "abbca"
输出：28
解释："abbca" 的子字符串有：
- 长度为 1 的子字符串："a"、"b"、"b"、"c"、"a" 的引力分别为 1、1、1、1、1，总和为 5 。
- 长度为 2 的子字符串："ab"、"bb"、"bc"、"ca" 的引力分别为 2、1、2、2 ，总和为 7 。
- 长度为 3 的子字符串："abb"、"bbc"、"bca" 的引力分别为 2、2、3 ，总和为 7 。
- 长度为 4 的子字符串："abbc"、"bbca" 的引力分别为 3、3 ，总和为 6 。
- 长度为 5 的子字符串："abbca" 的引力为 3 ，总和为 3 。
引力总和为 5 + 7 + 7 + 6 + 3 = 28 。
示例 2：

输入：s = "code"
输出：20
解释："code" 的子字符串有：
- 长度为 1 的子字符串："c"、"o"、"d"、"e" 的引力分别为 1、1、1、1 ，总和为 4 。
- 长度为 2 的子字符串："co"、"od"、"de" 的引力分别为 2、2、2 ，总和为 6 。
- 长度为 3 的子字符串："cod"、"ode" 的引力分别为 3、3 ，总和为 6 。
- 长度为 4 的子字符串："code" 的引力为 4 ，总和为 4 。
引力总和为 4 + 6 + 6 + 4 = 20 。
 

提示：

1 <= s.length <= 105
s 由小写英文字母组成
'''
'''
思路：动态规划
设dp[i]为截止第i个字符，以第i个字符结尾的子串的总引力（总计有i+1个子串），
当s[i]在之前的字符中出现过，与s[i]上一次出现的位置相关：
    dp[i]=dp[i-1]+i-latestIdx[s[i]]
上述公式意思是前i-1个字符结尾的子串有i个，其与第i个字符串可以构成i个新的字符串，
截止改字符出现的最后一个索引（latestIdx[s[i]]），因为没有新字符总的引力不变
从最后一个索引后，该子串又重新加入，引力每个子字符串+1，总计增加的引力是：i-latestIdx[s[i]]-1
第i+1个子串是个新增加的，需要+1

当s[i]在之前的字符中没有出现过：
    dp[i]=dp[i-1]+i+1
与第1个公式类似，不同之处在于有新的字符引入，与前面相比每个子串增加了1个引力
最后整个数组的求和即为总的引力

时间复杂度：O(n)
空间复杂度：O(n)
'''


class Solution:
    def appealSum(self, s: str) -> int:
        dp, latestIdx = [0] * len(s), {s[0]: 0}
        dp[0] = 1
        for i in range(1, len(s)):
            if s[i] in latestIdx:
                dp[i] = dp[i - 1] + i - latestIdx[s[i]]
            else:
                dp[i] = dp[i - 1] + i + 1
            latestIdx[s[i]] = i
        return sum(dp)


s = Solution()
print(s.appealSum("abbca"))
print(s.appealSum("code"))
