'''
学生出勤记录 II
可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：
'A'：Absent，缺勤
'L'：Late，迟到
'P'：Present，到场
如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：

按 总出勤 计，学生缺勤（'A'）严格 少于两天。
学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（'L'）记录。
给你一个整数 n ，表示出勤记录的长度（次数）。请你返回记录长度为 n 时，可能获得出勤奖励的记录情况 数量 。答案可能很大，
所以返回对 10^9 + 7 取余 的结果。

 

示例 1：

输入：n = 2
输出：8
解释：
有 8 种长度为 2 的记录将被视为可奖励：
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL"
只有"AA"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。
示例 2：

输入：n = 1
输出：3
示例 3：

输入：n = 10101
输出：183236316
 

提示：

1 <= n <= 10^5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/student-attendance-record-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
'''
思路：动态规划
状态定义：dp[n] 为不包括'A'，以'P'或'L'结尾的可奖励的字符串数
状态转移方程：dp[n] = 2 * dp[n-1] - dp[n - 4] = dp[n - 1] + (dp[n-1] - dp[n-4]),
该位置的可奖励的字符串数等于下一个位置以'P'结尾的可奖励的字符串数+（下一个位置以'L'结尾的可奖励的字符串数-以'LLL'结尾的字符串数）
base case：
    dp[0], dp[1], dp[2], dp[3] = 1, 2, 4, 7
    要注意，此时求的还没包括'A'，dp = [0] * (4 if n <= 3 else n + 1)
求出后再考虑字符串'A'的情况
'''


class Solution:
    def checkRecord(self, n: int) -> int:
        m = 10**9 + 7
        dp = [0] * (4 if n <= 3 else n + 1)
        dp[0], dp[1], dp[2], dp[3] = 1, 2, 4, 7
        for i in range(4, n + 1):
            dp[i] = (2 * dp[i - 1] - dp[i - 4]) % m
        res = dp[n]
        for i in range(n):
            res += dp[i] * dp[n - 1 - i] % m
        return res % m
