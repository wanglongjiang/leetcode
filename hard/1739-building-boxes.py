'''
1739. 放置盒子
有一个立方体房间，其长度、宽度和高度都等于 n 个单位。请你在房间里放置 n 个盒子，每个盒子都是一个单位边长的立方体。
放置规则如下：

你可以把盒子放在地板上的任何地方。
如果盒子 x 需要放置在盒子 y 的顶部，那么盒子 y 竖直的四个侧面都 必须 与另一个盒子或墙相邻。
给你一个整数 n ，返回接触地面的盒子的 最少 可能数量。

 

示例 1：



输入：n = 3
输出：3
解释：上图是 3 个盒子的摆放位置。
这些盒子放在房间的一角，对应左侧位置。
示例 2：



输入：n = 4
输出：3
解释：上图是 3 个盒子的摆放位置。
这些盒子放在房间的一角，对应左侧位置。
示例 3：



输入：n = 10
输出：6
解释：上图是 10 个盒子的摆放位置。
这些盒子放在房间的一角，对应后方位置。
 

提示：

1 <= n <= 109
'''
'''
思路：数学
观察方块的堆放，将最角落的视为第1层，包围它的视为第2层，依次类推
那么满层的个数是：
第1层：1
第2层：3->(1+2)
第3层：6->(1+2+3)
...
其公式为n*(n+1)*(n+2)/6
根据这个公式进行猜测，然后进行修正

时间复杂度：O(1)
空间复杂度：O(1)
'''


class Solution:
    def minimumBoxes(self, n: int) -> int:
        m = int((n * 6)**(1 / 3))
        fullCount = m * (m + 1) * (m + 2) // 6
        if fullCount == n:
            return (m * (m + 1)) >> 1  # 正好是完美的金字塔
        elif fullCount > n:
            m -= 1
        k = n - m * (m + 1) * (m + 2) // 6
        p = int((k << 1)**0.5)
        if p * (p + 1) // 2 < k:
            p += 1
        return ((m * (m + 1)) >> 1) + p


s = Solution()
print(s.minimumBoxes(3))
