'''
黑板异或游戏
黑板上写着一个非负整数数组 nums[i] 。Alice 和 Bob 轮流从黑板上擦掉一个数字，Alice 先手。
如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。 
(另外，如果只剩一个数字，按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为 0。）

换种说法就是，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。

假设两个玩家每步都使用最优解，当且仅当 Alice 获胜时返回 true。

 

示例：

输入: nums = [1, 1, 2]
输出: false
解释:
Alice 有两个选择: 擦掉数字 1 或 2。
如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么 Bob 可以擦掉任意数字，
因为 Alice 会成为擦掉最后一个数字的人，她总是会输。
如果 Alice 擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。Alice 仍然会输掉游戏。
 

提示：

1 <= N <= 1000
0 <= nums[i] <= 2^16
'''
from typing import List
'''
思路：位运算，脑筋急转弯
如果一个数组arr异或结果为0，它的上一步a^arr不是0，a^arr=a，然而因为2个人都会用最优解，会避免消去a让下一个人获胜。
故除了数组一开始结果就是0这种特殊情况，其他情况下2人谁能获胜要看谁去消最后一个，谁消最后一个谁输，也就是看数组大小的奇偶性。
算法如下：
1. 计数整个数组的异或，如果为0，则Alice获胜。
2. 判断数组大小是奇数还是偶数，如果是偶数则bob会输，如果是奇数则Alice会输。

时间复杂度：O(n)
空间复杂度：O(1)
'''


class Solution:
    def xorGame(self, nums: List[int]) -> bool:
        xor = 0
        for num in nums:
            xor ^= num
        if xor == 0:  # 初始异或就是0，Alice获胜
            return True
        return len(nums) % 2 == 0  # 如果是偶数，Alice获胜，返回True，否则返回False
